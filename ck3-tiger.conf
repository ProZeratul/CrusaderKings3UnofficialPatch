# The ck3-tiger.conf file is in standard Paradox script format.
# It should be placed in the top directory of your mod.

languages = {
	# This will check only english and german localizations
	#check = "english"
	#check = "german"

	# If you DON'T specify any check languages, you can instead say which ones to skip.
	#skip = "french"
	#skip = "spanish"

	# If you don't specify anything in languages, the validator will check all languages.
}

# Allows configuring what reports are printed by CK3-Tiger.
filter = {

    # Whether to report about problems in vanilla game files.
    # Setting this to 'yes' results in a LOT of spam.
    # Optional boolean value, defaults to no.
    show_vanilla = no

    # Whether to report about problems in mods loaded via the load_mod sections.
    # Optional boolean value, defaults to no.
    show_loaded_mods = no

    # Contains rules for reports, using trigger syntax.
    # Only reports matching the trigger will be printed.
    # The root trigger is an AND block, just like any other trigger.
    trigger = {
        # For more information, there is a guide at: ck3-tiger/filter.md

        # In short, valid trigger keys are:
        # - always = yes/no
        # - NOT, AND, OR, NAND, NOR
        # - severity
        # - confidence
        # - key
        # - file
        # - text
        # - ignore_keys_in_files

 		# Only print warnings and errors
		severity >= Warning
		# Don't print reports that are likely false positives
		confidence >= Reasonable

		# False positives
		NAND = { # max in random is likely valid
			key = validation
			text = "`max = ` is only for `ordered_` lists, `random_list`, and `duel`"
			file = common/scripted_effects/07_dlc_ep3_scripted_effects.txt
		}
		NAND = { # conqueror_chronicle has no properties
			key = field-missing
			text = "required field `properties` missing"
			file = events/dlc/ep3/ep3_laamp_decision_events.txt
		}
		NAND = { # these effects use root only to capture it as a scope if scope:actor is not set
			key = scopes
			OR = {
				text = "`break_grand_wedding_betrothal_effect` expects root to be any except none scope but root seems to be none"
				text = "`elope_success_effect` expects root to be any except none scope but root seems to be none"
			}
			file = common/character_interactions/00_marriage_interactions.txt
		}
		NAND = { # list changed_obligations is never created and so is likely hardcoded
			key = strict-scopes
			text = "expects list changed_obligations to exist"
			file = common/character_interactions/00_modifiy_vassal_contract.txt
		}
		NAND = { # valid_character, sort_order scopes are likely character, not none
			key = scopes
			OR = {
				text = "`valid_camp_officer_trigger` expects scope to be character but scope seems to be none"
				text = "`employs_court_position` is for character but scope seems to be none"
				text = "`any_child` is for character but scope seems to be none"
				text = "`any_courtier` is for character but scope seems to be none"
				text = "`promoted_legend` is for character but scope seems to be none"
				text = "`num_personal_legend_seeds` is for character but scope seems to be none"
				text = "`num_triggered_legend_seeds` is for character but scope seems to be none"
			}
			OR = {
				file = common/court_positions/types/00_court_positions.txt
				file = common/court_positions/types/00_camp_officers.txt
			}
		}
		NAND = { # provisions = max_provisions seems correct here
			key = logic
			text = "`provisions =` means exactly equal to that amount, which is usually not what you want"
			OR = {
				file = common/task_contracts/laamp_extra_contracts.txt
				file = events/dlc/ep3/ep3_interactions_events.txt
				file = events/dlc/ep3/ep3_laamp_decision_events.txt
			}
		}
		NAND = { # overwriting the previous value seems correct here
			key = logic
			text = "setting value here will overwrite the previous calculations"
			file = common/script_values/07_ep3_values.txt
		}
		NAND = { # scope:ai_recipient is only used by this effect if it exsts
			key = strict-scopes
			text = "`diarch_overwrites_old_designated_heir_apply_opinions_effect` expects scope:ai_recipient to be set"
			file = common/character_interactions/06_ep3_interactions.txt
		}
		NAND = { # scheme scopes are generated automatically
			key = strict-scopes
			OR = {
				text = "`hostile_scheme_monthly_discovery_chance_effect` expects scope:scheme to be set"
				text = "`hostile_scheme_monthly_discovery_chance_effect` expects scope:owner to be set"
				text = "`hostile_scheme_monthly_discovery_chance_effect` expects scope:target to be set"
			}
			file = common/scripted_effects/00_scheme_scripted_effects.txt
		}
		NAND = { # scheme effects work correctly with both titles and characters as targets
			key = scopes
			OR = {
				text = "`hostile_scheme_monthly_discovery_chance_effect` expects scope:target to be landed title but scope:target seems to be character"
				text = "`agent_valid_to_be_discovered_by_spymaster` expects scope:target_character to be character but scope:target_character seems to be landed title"
				text = "`scheme_unique_interception_roll_effect` expects scope:target to be character but scope:target seems to be landed title"
				text = "`scheme_intercept_repeatable_chance_total_value` expects scope to be character but scope seems to be landed title"
				text = "`host` is for character but scope seems to be landed title"
				text = "`scope:target` produces landed title but expected character"
			}
			file = common/scripted_effects/00_scheme_scripted_effects.txt
		}
		NAND = { # scheme values try to work correctly with both titles and characters as targets
			key = scopes
			text = "`province_owner` is for province but scope seems to be landed title"
			file = common/script_values/00_scheme_values.txt
		}
		NAND = { # ai_agent_join_chance_basic_suite_modifier tries to work correctly with both titles and characters as targets
			key = scopes
			text = "`ai_agent_join_chance_basic_suite_modifier` expects scope:target to be character but scope:target seems to be landed title"
			file = common/scripted_modifiers/00_scheme_scripted_modifiers.txt
		}
		NAND = { # _dynasty_prestige_value values are changed in Unop to accept both dynasty and character
			key = scopes
			text = "`dynasty` is for character but scope seems to be dynasty"
			file = common/script_values/00_basic_values.txt
		}
		NAND = { # _dynasty_prestige_value values are changed in Unop to accept both dynasty and character
			key = scopes
			OR = {
				text = "_dynasty_prestige_value` expects scope to be dynasty but scope seems to be character"
				text = "_dynasty_prestige_gain` expects scope to be dynasty but scope seems to be character"
				text = "_dynasty_prestige_loss` expects scope to be dynasty but scope seems to be character"
			}
		}
		NAND = { # hunt_activity_deer_game_effect is changed in Unop to work with both character and story cycle
			key = scopes
			text = "`hunt_activity_deer_game_effect` expects root to be character but root seems to be story cycle"
			file = common/story_cycles/story_cycle_hunt_mystical_animal.txt
		}
		NAND = { # could be false positive or not, in any case there seems to be no way to fix it (besides deleting the code)
			key = scopes
			text = "`max_military_strength` is for character but scope seems to be mercenary company"
			file = common/script_values/00_activity_values.txt
		}
		NAND = { # squared_distance should work also with counties and baronies according to docs
			key = scopes
			OR = {
				text = "`scope:distance_target` produces landed title but expected province"
				text = "`capital_county` produces landed title but expected province"
				text = "`barony` produces landed title but expected province"
			}
			OR = {
				file = common/character_interactions/06_ep3_laamp_interactions.txt
				file = common/task_contracts/laamp_base_contracts.txt
			}
		}
		NAND = { # vassal_contract_obligation_level_score should work with contract types according to docs
			key = scopes
			text = "`scope:contract_type` produces vassal contract but expected vassal obligation level"
			file = common/script_values/00_basic_values.txt
		}
		NAND = { # reassign_title_troops cost has title scope and scope:actor according to comment
			OR = {
				key = scopes
				key = strict-scopes
			}
			OR = {
				text = "`admin_title_troop_command_cost_value` expects scope:actor to be set"
				text = "`admin_title_troop_command_cost_value` expects scope to be landed title but scope seems to be character"
			}
			file = common/scripted_costs/00_costs.txt
		}
		NAND = { # select_poem_subject_gender_effect receives scope:subject as flag and converts it to a character
			key = scopes
			text = "`flag:man` produces flag but expected character"
			file = common/scripted_effects/00_poetry_effects.txt
		}
		NAND = { # forge_the_jomsvikings_decision_tooltip_effect doesn't need scope:new_holy_order while building a tooltip
			key = strict-scopes
			text = "`forge_the_jomsvikings_decision_tooltip_effect` expects scope:new_holy_order to be set"
			file = common/decisions/dlc_decisions/fp_1/00_fp1_major_decisions.txt
		}
		NAND = { # scope:target doesn't seem to be set anywhere, perhaps hardcoded somehow
			key = scopes
			OR = {
				text = "`dynasty` produces dynasty but expected landed title"
				text = "`house` produces dynasty house but expected landed title"
			}
			file = events/dlc/ep1/ep1_fund_inspiration_events.txt
		}
		NAND = { # council_owner_modifier is likely setting these scopes, or it it's not, it can't be fixed anyway
			key = strict-scopes
			OR = {
				text = "expects scope:councillor_liege to be set"
				text = "expects scope:councillor to be set"
			}
			OR = {
				file = common/script_values/99_court_chaplain_values.txt
				file = common/script_values/99_marshal_values.txt
				file = common/scripted_triggers/00_councillor_triggers.txt
			}
		}
		NAND = { # artifacts created in eastereggs.txt may not have scope:location but this is fine
			key = strict-scopes
			text = "`create_artifact_weapon_effect` expects scope:location to be set"
			file = common/scripted_effects/00_ep1_artifact_creation_effects.txt
		}
		NAND = { # artifact_should_use_gfx_type_trigger will fallback correctly if there is no scope:artifact
			key = strict-scopes
			text = "`create_artifact_weapon_effect` expects scope:artifact to be set"
			file = common/scripted_effects/00_ep1_artifact_creation_effects.txt
		}
		NAND = { # switch in descriptions is actually ok
			key = unknown-field
			text = "unexpected key in description"
			file = events/dlc/bp2/bp2_yearly_7.txt
		}

		# Ignored
		NAND = { # ignore missing-localization for now
			key = missing-localization
		}
		NAND = { # ignore missing-perspective in custom descriptons for now
			key = missing-perspective
		}
		NAND = { # ignore history warnings for now
			key = history
		}
		NAND = { # ignore missing graphics for now
			key = missing-file
			text = ".dds does not exist"
			file = common/activities/pulse_actions/tournament_actions.txt
		}
		NAND = { # ignore "too complex trigger" warnings for now
			key = tooltip
			text = "is a too complex trigger to be tooltipped in a trigger that shows failures only"
		}
		NAND = { # ignore scope warnings in debug interactions for now
			OR = {
				key = scopes
				key = strict-scopes
			}
			file = common/character_interactions/00_debug_interactions.txt
		}
		NAND = { # ignore duplicate fields in Unop test events for now
			key = duplicate-field
			OR = {
				text = "multiple descs in one triggered_desc"
				text = "multiple unconditional desc in one first_valid"
			}
			file = events/unop_events/unop_test_events.txt
		}
		NAND = { # scope:victim is only needed for murder-attempt & murder secrets, but in this case we are in a deviant secret
			key = strict-scopes
			text = "`secret_exposed_owner_effects_effect` expects scope:victim to be set"
			file = events/activities/tournaments/contest_events.txt
		}
		NAND = { # ignore "too complex trigger" warnings for now
			key = missing-file
			OR = {
				text = "file gfx/interface/icons/activity_pulse_actions/marriage.dds does not exist"
				text = "file gfx/interface/icons/activity_pulse_actions/friend.dds does not exist"
				text = "file gfx/interface/icons/activity_pulse_actions/wound.dds does not exist"
				text = "file gfx/interface/icons/activity_pulse_actions/courtly.dds does not exist"
				text = "file gfx/interface/icons/activity_pulse_actions/stewardship.dds does not exist"
				text = "file gfx/interface/icons/activity_pulse_actions/intrigue.dds does not exist"
			}
		}
	}
}

#characters = {
#	# Only warn about characters who are born by this date (usually your last bookmark)
#	only_born = "1511.1.1"  # optional
#}

# Sometimes ck3-tiger makes a mistake in determining the scope types expected
# by a scripted trigger or effect. Its conclusions can be overridden here.
# Scope overrides can be ALL (to accept any scope) or a list separated by |,
# like character|province|landed_title
scope_override = {
	artifact_low_rarity_trigger = ALL
	artifact_medium_rarity_trigger = ALL
	artifact_high_rarity_trigger = ALL
	artifact_region_trigger = ALL
}

# Optional block to control output styles and colors. Colors are enabled by default.
# Another way to disable all ANSI characters in the output is to supply the --no-color flag.
# That flag will override anything you define here, in the config file.
output_style = {
    # Default value is 'yes', except with ck3-tiger-auto when it is default 'no'.
    # If set to 'no', no ANSI characters will be added to the output and the output will not be colored.
    # Also, all other settings in this block will be ignored.
#    enable = yes

    # Optional block to set the error color.
#    error = {
#        # Default is red. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
#        color = "red"
#    }
    # Optional block to set the warning color.
#    warning = {
#        # Default is yellow. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
#        color = "yellow"
#    }
    # Optional block to set the info color.
#    info = {
#        # Default is green. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
#        color = "green"
#    }
    # Optional block to set the advice color.
#    untidy = {
#        # Default is cyan. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
#        color = "cyan"
#    }

}
